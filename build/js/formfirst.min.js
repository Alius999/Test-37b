/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/formfirst.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/formfirst.js":
/*!*************************!*\
  !*** ./js/formfirst.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

var firstFormButton = document.querySelector('.form__button--first');
var modalFirstForm = document.querySelector('.modal-first__form');
var modalClose = document.querySelector('.modal-first__close');
var firstForm = document.querySelector('.modal-first');
var firstLabelAgreement = document.querySelector('.modal-first__agreement-label');
var emailFirst = document.getElementById('first-form-email');
var cityFirst = document.getElementById('first-form-city');
var agreementFirst = document.getElementById('first-form-agreement');
var emailLabelFirst = document.getElementById('first-label-email');
var cityLabelFirst = document.getElementById('first-label-city');
var sendBtnFirst = document.getElementById('send-button-first');

// Открываем фому

firstFormButton.addEventListener('click', function () {
  firstForm.classList.remove('visually-hidden');
});

// Закрываем форму

modalClose.addEventListener('click', function () {
  firstForm.classList.add('visually-hidden');
});

// const createErrorMessage = (parent, text) => {
//   let newElement = document.createElement('p');
//   parent.appendChild(newElement);
//   newElement.textContent = text;
//   newElement.style.marginBottom = 0;
//   newElement.style.marginTop = 8 + 'px';
//   newElement.classList.add('form__new-element');
// }

var errorParagraphEmail = document.getElementById('form__new-element');
var errorParagraphClassEmail = errorParagraphEmail.classList.add('form__new-element');
var errorParagraphCity = document.getElementById('form__new-element-city');
var errorParagraphClassCity = errorParagraphCity.classList.add('form__new-element-city');
var errorParagraphCheckBox = document.getElementById('form__new-element-checkbox');
var errorParagraphClassCheckBox = errorParagraphCheckBox.classList.add('form__new-element-checkbox');

// Функция создания сообщений об ошибке

var createErrorMessageEmail = function createErrorMessageEmail(label, text) {
  var thisParagraph = label.querySelector('.form__new-element');
  thisParagraph.textContent = text;
  return text;
};
var createErrorMessageCity = function createErrorMessageCity(label, text) {
  var thisParagraph = label.querySelector('.form__new-element-city');
  thisParagraph.textContent = text;
  return text;
};
var createErrorMessageCheckBox = function createErrorMessageCheckBox(label, text) {
  var thisParagraph = label.querySelector('.form__new-element-checkbox');
  thisParagraph.textContent = text;
  return text;
};

// Удаление сообщений об ошибках

var removeThisParagraphEmail = function removeThisParagraphEmail(label) {
  var paragraph = label.querySelector('.form__new-element');
  paragraph.textContent = '';
};
var removeThisParagraphCity = function removeThisParagraphCity(label) {
  var paragraph = label.querySelector('.form__new-element-city');
  paragraph.textContent = '';
};
var removeThisParagraphCheckBox = function removeThisParagraphCheckBox(label) {
  var paragraph = label.querySelector('.form__new-element-checkbox');
  paragraph.textContent = '';
};

// Фалидация email на соответствие формату

function validateEmail(email) {
  var regEmail = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return regEmail.test(String(email).toLowerCase());
}

// Валидация названия города

function validateCity(city) {
  var regCity = /^([а-яА-ЯёЁ]+[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*)$/i;
  return regCity.test(String(city).toLowerCase());
}

// Отправка формы

firstForm.onsubmit = function (e) {
  var emailFirstVal = emailFirst.value,
    cityFirstVal = cityFirst.value;

  // Проверка на пустые поля почты и названия города

  var emailName = function emailName() {
    if (emailFirstVal === '') {
      emailFirst.classList.add('form__error-input');
      removeThisParagraphEmail(emailLabelFirst);
      createErrorMessageEmail(emailLabelFirst, 'Поле не может быть пустым');
      return false;
    } else {
      emailFirst.classList.remove('form__error-input');
      removeThisParagraphEmail(emailLabelFirst);
      return true;
    }
  };

  // Валидация почты

  var emailNameFoo = function emailNameFoo() {
    if (emailName() === true) {
      if (!validateEmail(emailFirstVal)) {
        emailFirst.classList.add('form__error-input');
        removeThisParagraphEmail(emailLabelFirst);
        createErrorMessageEmail(emailLabelFirst, 'Неверный формат почты');
        return false;
      } else {
        emailFirst.classList.remove('form__error-input');
        removeThisParagraphEmail(emailLabelFirst);
        return true;
      }
    }
  };

  // Базовая валидация названия города

  var cityName = function cityName() {
    if (cityFirstVal === '' || cityFirstVal.length < 3 || cityFirstVal === '  ') {
      cityFirst.classList.add('form__error-input');
      removeThisParagraphCity(cityLabelFirst);
      createErrorMessageCity(cityLabelFirst, 'Поле не может быть пустым, иметь менее трёх символов или содержать два пробела подряд');
      return false;
    } else {
      cityFirst.classList.remove('form__error-input');
      removeThisParagraphCity(cityLabelFirst);
      return true;
    }
  };

  // Валидация названия города

  var cityNameFoo = function cityNameFoo() {
    if (cityName() === true) {
      if (!validateCity(cityFirstVal)) {
        cityFirst.classList.add('form__error-input');
        removeThisParagraphCity(cityLabelFirst);
        createErrorMessageCity(cityLabelFirst, 'Проверьте правильность названия города: название должно быть на русском языке, допустимо использование дефиса в названии. Например, "Ростов-на-Дону"');
        return false;
      } else {
        cityFirst.classList.remove('form__error-input');
        removeThisParagraphCity(cityLabelFirst);
        return true;
      }
    }
  };

  // Проверка состояния чекбокса

  var cityNameCheckbox = function cityNameCheckbox() {
    if (!agreementFirst.checked) {
      firstLabelAgreement.classList.add('form__error-checkbox-label');
      removeThisParagraphCheckBox(firstLabelAgreement);
      createErrorMessageCheckBox(firstLabelAgreement, 'Вы должны принять соглашение');
      return false;
    } else {
      firstLabelAgreement.classList.remove('form__error-checkbox-label');
      removeThisParagraphCheckBox(firstLabelAgreement);
      return true;
    }
  };

  // Проверяем соблюдение условий

  if (emailName() !== true || cityName() !== true || cityNameCheckbox() !== true || emailNameFoo() !== true || cityNameFoo() !== true) {
    console.log(emailName(), cityName(), cityNameCheckbox(), emailNameFoo(), cityNameFoo());
    e.preventDefault();
  } else if (emailName() === true && cityName() === true && cityNameCheckbox() === true && emailNameFoo() === true && cityNameFoo() === true) {
    e.preventDefault();
    console.log("\u041F\u043E\u0447\u0442\u043E\u0432\u044B\u0439 \u044F\u0449\u0438\u043A: ".concat(emailFirst.value, ";\n\u0413\u043E\u0440\u043E\u0434: ").concat(cityFirst.value, ";\n\u0421\u043E\u0433\u043B\u0430\u0448\u0435\u043D\u0438\u0435 \u043F\u0440\u0438\u043D\u044F\u0442\u043E (on/off): ").concat(agreementFirst.value));
    // SubmitEvent();
  }
};

// Удаление ошибок по событию инпут

firstForm.oninput = function (e) {
  var emailFirstVal = emailFirst.value,
    cityFirstVal = cityFirst.value;
  if (emailFirst.classList.contains('form__error-input')) {
    if (validateEmail(emailFirstVal) === true && emailFirstVal.length >= 3) {
      emailFirst.classList.remove('form__error-input');
      removeThisParagraphEmail(emailLabelFirst);
      return true;
    }
  }
  if (cityFirst.classList.contains('form__error-input')) {
    if (validateCity(cityFirstVal) === true && cityFirstVal.length >= 3) {
      cityFirst.classList.remove('form__error-input');
      removeThisParagraphCity(cityLabelFirst);
      return true;
    }
  }
  if (agreementFirst.checked) {
    firstLabelAgreement.classList.remove('form__error-checkbox-label');
    removeThisParagraphCheckBox(firstLabelAgreement);
    return true;
  }
};

/***/ })

/******/ });
//# sourceMappingURL=formfirst.min.js.map
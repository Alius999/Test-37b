/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/formsecond.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/formsecond.js":
/*!**************************!*\
  !*** ./js/formsecond.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

var secondFormButton = document.querySelector('.form__button--second');
var secondForm = document.querySelector('.modal-second');
var modalCloseSecond = document.querySelector('.modal-second__close');
var secondLabelAgreement = document.querySelector('.modal-second__agreement-label');
var firstName = document.getElementById('second-form-first-name');
var lastName = document.getElementById('second-form-last-name');
var phoneSecondForm = document.getElementById('second-form-phone');
var emailSecond = document.getElementById('second-form-email');
var companyName = document.getElementById('second-form-company-name');
var secondFormState = document.getElementById('second-form-state');
var agreementSecond = document.getElementById('second-form-agreement');
var firstNameLabel = document.getElementById('second-label-first-name');
var lastNameLabel = document.getElementById('second-label-last-name');
var phoneSecondFormLabel = document.getElementById('second-label-phone');
var emailSecondLabel = document.getElementById('second-label-email');
var companyNameLabel = document.getElementById('second-label-company-name');
var secondFormStateLabel = document.getElementById('second-label-state');
var agreementSecondLabel = document.getElementById('modal-second__agreement-label');
var sendBtnFirst = document.getElementById('send-button-second');

// Находим параграфы ошибок по ID и добавляем класс ошибки

var errorFirstName = document.getElementById('form__first-name-error');
var errorFirstnameClass = errorFirstName.classList.add('form__first-name-error');
var errorLastName = document.getElementById('form__last-name-error');
var errorLastNameClass = errorLastName.classList.add('form__last-name-error');
var errorPhone = document.getElementById('form__phone-error');
var errorPhoneClass = errorPhone.classList.add('form__phone-error');
var errorEmail = document.getElementById('form__email-error');
var errorEmailClass = errorEmail.classList.add('form__email-error');
var errorCompanyName = document.getElementById('form__company-name-error');
var errorCompanyNameClass = errorCompanyName.classList.add('form__company-name-error');
var errorState = document.getElementById('form__state-error');
var errorStateClass = errorState.classList.add('form__state-error');
var errorCheckBox = document.getElementById('form__checkbox-error');
var errorCheckBoxClass = errorCheckBox.classList.add('form__checkbox-error');

// Создаём функции сообщений о неверно заполненном поле

var createErrorFirstName = function createErrorFirstName(label, text) {
  var thisParagraph = label.querySelector('.form__first-name-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorLastName = function createErrorLastName(label, text) {
  var thisParagraph = label.querySelector('.form__last-name-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorPhone = function createErrorPhone(label, text) {
  var thisParagraph = label.querySelector('.form__phone-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorEmail = function createErrorEmail(label, text) {
  var thisParagraph = label.querySelector('.form__email-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorCompanyName = function createErrorCompanyName(label, text) {
  var thisParagraph = label.querySelector('.form__company-name-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorState = function createErrorState(label, text) {
  var thisParagraph = label.querySelector('.form__state-error');
  thisParagraph.textContent = text;
  return text;
};
var createErrorCheckBox = function createErrorCheckBox(label, text) {
  var thisParagraph = label.querySelector('.form__checkbox-error');
  thisParagraph.textContent = text;
  return text;
};

// Удаление сообщений об ошибках

var removeErrorFirstName = function removeErrorFirstName(label) {
  var paragraph = label.querySelector('.form__first-name-error');
  paragraph.textContent = '';
};
var removeErrorLastName = function removeErrorLastName(label) {
  var paragraph = label.querySelector('.form__last-name-error');
  paragraph.textContent = '';
};
var removeErrorPhone = function removeErrorPhone(label) {
  var paragraph = label.querySelector('.form__phone-error');
  paragraph.textContent = '';
};
var removeErrorEmail = function removeErrorEmail(label) {
  var paragraph = label.querySelector('.form__email-error');
  paragraph.textContent = '';
};
var removeErrorCompanyName = function removeErrorCompanyName(label) {
  var paragraph = label.querySelector('.form__company-name-error');
  paragraph.textContent = '';
};
var removeErrorState = function removeErrorState(label) {
  var paragraph = label.querySelector('.form__state-error');
  paragraph.textContent = '';
};
var removeErrorCheckBox = function removeErrorCheckBox(label) {
  var paragraph = label.querySelector('.form__checkbox-error');
  paragraph.textContent = '';
};

// Открываем фому

secondFormButton.addEventListener('click', function () {
  secondForm.classList.remove('visually-hidden');
});

// Закрываем форму

modalCloseSecond.addEventListener('click', function () {
  secondForm.classList.add('visually-hidden');
});

// Валидация полей на соответствие формату

function validateFirstName(firstName) {
  var regFirstName = /^[а-яА-ЯёЁ]+/g;
  return regFirstName.test(String(firstName).toLowerCase());
}
function validateLastName(lastName) {
  var regLastName = /^([а-яА-ЯёЁ]+[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*)$/i;
  return regLastName.test(String(lastName).toLowerCase());
}
function validatePhone(phone) {
  var regPhone = /^\+?[78][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$/;
  return regPhone.test(String(phone).toLowerCase());
}
function validateEmailSecond(email) {
  var regEmail = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return regEmail.test(String(email).toLowerCase());
}
function validateCompanyName(companyName) {
  var regCompanyName = /^([a-zA-Zа-яА-ЯёЁ]+[-]?[a-zA-Zа-яА-ЯёЁ]*[-]?[a-zA-Zа-яА-ЯёЁ]*[-]?[a-zA-Zа-яА-ЯёЁ]*)$/i;
  return regCompanyName.test(String(companyName).toLowerCase());
}
function validateState(state) {
  var regState = /^([а-яА-ЯёЁ]+[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*[-]?[а-яА-ЯёЁ]*)$/i;
  return regState.test(String(state).toLowerCase());
}

// Отправка формы

secondForm.onsubmit = function (e) {
  var firstNameVal = firstName.value,
    lastNameVal = lastName.value,
    phoneSecondFormVal = phoneSecondForm.value,
    emailSecondVal = emailSecond.value,
    companyNameVal = companyName.value,
    secondFormStateVal = secondFormState.value;

  // Валидация имени

  var checkFirstName = function checkFirstName() {
    if (!validateFirstName(firstNameVal) || firstNameVal === '' || firstNameVal.length < 3) {
      firstName.classList.add('form__error-input');
      removeErrorFirstName(firstNameLabel);
      createErrorFirstName(firstNameLabel, 'Некорректное имя. Поле не может быть пустым или иметь менее 3-х символов. Разрешена только кириллица');
      return false;
    } else {
      firstName.classList.remove('form__error-input');
      removeErrorFirstName(firstNameLabel);
      return true;
    }
  };

  // Валидация фамилии

  var checkLastName = function checkLastName() {
    if (!validateLastName(lastNameVal) || lastNameVal === '' || lastNameVal.length < 3) {
      lastName.classList.add('form__error-input');
      removeErrorLastName(lastNameLabel);
      createErrorLastName(lastNameLabel, 'Некорректная фамилия. Поле не может быть пустым или иметь менее 3-х символов. Разрешена только кириллица.');
      return false;
    } else {
      lastName.classList.remove('form__error-input');
      removeErrorLastName(lastNameLabel);
      return true;
    }
  };

  // Валидация телефона

  var checkPhone = function checkPhone() {
    if (!validatePhone(phoneSecondFormVal) || phoneSecondFormVal === '' || phoneSecondFormVal.length < 3) {
      phoneSecondForm.classList.add('form__error-input');
      removeErrorPhone(phoneSecondFormLabel);
      createErrorPhone(phoneSecondFormLabel, 'Некорректный номер, разрешены только цифры и знак "+". Например: +79995557722');
      return false;
    } else {
      phoneSecondForm.classList.remove('form__error-input');
      removeErrorPhone(phoneSecondFormLabel);
      return true;
    }
  };

  // Валидация почты

  var checkEmail = function checkEmail() {
    if (!validateEmailSecond(emailSecondVal) || emailSecondVal === '' || emailSecondVal.length < 3) {
      emailSecond.classList.add('form__error-input');
      removeErrorEmail(emailSecondLabel);
      createErrorEmail(emailSecondLabel, 'Неверный формат почты. Поле не может быть пустым');
      return false;
    } else {
      emailSecond.classList.remove('form__error-input');
      removeErrorEmail(emailSecondLabel);
      return true;
    }
  };

  // Базовая валидация названия компании

  var checkCompanyName = function checkCompanyName() {
    if (!validateCompanyName(companyNameVal) || companyNameVal === '' || companyNameVal.length < 2) {
      companyName.classList.add('form__error-input');
      removeErrorCompanyName(companyNameLabel);
      createErrorCompanyName(companyNameLabel, 'Некорректное название. Поле не может быть пустым или иметь менее 3-х символов. Название Допустима латиница и кириллица. Без спец символов. Разрешен дефис');
      return false;
    } else {
      companyName.classList.remove('form__error-input');
      removeErrorCompanyName(companyNameLabel);
      return true;
    }
  };

  // Валидация названия региона

  var checkState = function checkState() {
    if (!validateState(secondFormStateVal) || secondFormStateVal === '' || secondFormStateVal.length < 3) {
      secondFormState.classList.add('form__error-input');
      removeErrorState(secondFormStateLabel);
      createErrorState(secondFormStateLabel, 'Проверьте правильность названия города: поле не может быть пустым или иметь менее 3-х символов. Название должно быть на русском языке, допустимо использование дефиса в названии. Например, "Ростов-на-Дону"');
      return false;
    } else {
      secondFormState.classList.remove('form__error-input');
      removeErrorState(secondFormStateLabel);
      return true;
    }
  };

  // Проверка состояния чекбокса

  var validateCheckbox = function validateCheckbox() {
    if (!agreementSecond.checked) {
      agreementSecondLabel.classList.add('form__error-checkbox-label');
      removeErrorCheckBox(agreementSecondLabel);
      createErrorCheckBox(agreementSecondLabel, 'Вы должны принять соглашение');
      return false;
    } else {
      agreementSecondLabel.classList.remove('form__error-checkbox-label');
      removeErrorCheckBox(agreementSecondLabel);
      return true;
    }
  };

  // Проверяем соблюдение условий

  if (checkFirstName() !== true || checkLastName() !== true || checkPhone() !== true || checkEmail() !== true || checkCompanyName() !== true || checkState() !== true || validateCheckbox() !== true) {
    console.log(checkFirstName(), checkLastName(), checkPhone(), checkEmail(), checkCompanyName(), checkState(), validateCheckbox());
    e.preventDefault();
  } else if (checkFirstName() === true && checkLastName() === true && checkPhone() === true && checkEmail() === true && checkCompanyName() === true && checkState() === true && validateCheckbox() === true) {
    e.preventDefault();
    console.log("\u0418\u043C\u044F: ".concat(firstName.value, ";\n\u0424\u0430\u043C\u0438\u043B\u0438\u044F: ").concat(lastName.value, ";\n\u0422\u0435\u043B\u0435\u0444\u043E\u043D: ").concat(phoneSecondForm.value, "\n\u041F\u043E\u0447\u0442\u0430: ").concat(emailSecond.value, ";\n\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438: ").concat(companyName.value, "\n\u0420\u0435\u0433\u0438\u043E\u043D: ").concat(secondFormState.value, ";\n\u0421\u043E\u0433\u043B\u0430\u0448\u0435\u043D\u0438\u0435 \u043F\u0440\u0438\u043D\u044F\u0442\u043E (on/off): ").concat(agreementSecond.value));
    // SubmitEvent();
  }
};

// Удаление ошибок по событию инпут

secondForm.oninput = function (e) {
  var firstNameVal = firstName.value,
    lastNameVal = lastName.value,
    phoneSecondFormVal = phoneSecondForm.value,
    emailSecondVal = emailSecond.value,
    companyNameVal = companyName.value,
    secondFormStateVal = secondFormState.value;
  if (firstName.classList.contains('form__error-input')) {
    if (validateFirstName(firstNameVal) && firstNameVal !== '' && firstNameVal.length >= 3) {
      firstName.classList.remove('form__error-input');
      removeErrorFirstName(firstNameLabel);
      return true;
    }
  }
  if (lastName.classList.contains('form__error-input')) {
    if (validateLastName(lastNameVal) && lastNameVal !== '' && lastNameVal.length >= 3) {
      lastName.classList.remove('form__error-input');
      removeErrorLastName(lastNameLabel);
      return true;
    }
  }
  if (phoneSecondForm.classList.contains('form__error-input')) {
    if (validatePhone(phoneSecondFormVal) && phoneSecondFormVal !== '' && phoneSecondFormVal.length >= 3) {
      phoneSecondForm.classList.remove('form__error-input');
      removeErrorPhone(phoneSecondFormLabel);
      return true;
    }
  }
  if (emailSecond.classList.contains('form__error-input')) {
    if (validateEmailSecond(emailSecondVal) && emailSecondVal !== '' && emailSecondVal.length >= 3) {
      emailSecond.classList.remove('form__error-input');
      removeErrorEmail(emailSecondLabel);
      return true;
    }
  }
  if (companyName.classList.contains('form__error-input')) {
    if (validateCompanyName(companyNameVal) && companyNameVal !== '' && companyNameVal.length >= 2) {
      companyName.classList.remove('form__error-input');
      removeErrorCompanyName(companyNameLabel);
      return true;
    }
  }
  if (secondFormState.classList.contains('form__error-input')) {
    if (validateState(secondFormStateVal) && secondFormStateVal !== '' && secondFormStateVal.length >= 3) {
      secondFormState.classList.remove('form__error-input');
      removeErrorState(secondFormStateLabel);
      return true;
    }
  }
  if (agreementSecond.checked) {
    agreementSecondLabel.classList.remove('form__error-checkbox-label');
    removeErrorCheckBox(agreementSecondLabel);
    return true;
  }
};

/***/ })

/******/ });
//# sourceMappingURL=formsecond.min.js.map